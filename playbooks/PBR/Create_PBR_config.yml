- name: Using the IBM Storage Virtualize collection For PBR configuration
  hosts: localhost
  collections:
    - ibm.storage_virtualize
  gather_facts: no
  connection: local
  vars_files:
    - PBR_variable.txt
  tasks:
    - name: Create provisioning policy on primary
      ibm_sv_manage_provisioning_policy:
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: provisioning_policy0
        capacitysaving: "drivebased"
        state: present
    - name: Create provisioning policy on secondary
      ibm_sv_manage_provisioning_policy:
        clustername: "{{secondary_cluster_ip}}"
        username: "{{secondary_cluster_username}}"
        password: "{{secondary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: provisioning_policy0
        capacitysaving: "drivebased"
        state: present
    - name: Get mdisk info
      register: results
      ibm_svcinfo_command:
        command: "svcinfo lsmdiskgrp"
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
    - name: show mdiskgrp status
      set_fact:
        id: "{{ (results['stdout']) }}"
    - name: Print the list
      set_fact:
        uid: uid
    - name: show mdiskgrp status
      set_fact:
        uid: "{{item['replication_pool_link_uid']}}"
      loop: "{{id}}"
    - name: Get primary cluster id info 
      register: results
      ibm_svcinfo_command:
        command: "svcinfo lspartnership"
        clustername: "{{secondary_cluster_ip}}"
        username: "{{secondary_cluster_username}}"
        password: "{{secondary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
    - name: show cluster id 
      set_fact:
        id1: "{{ (results['stdout']) }}"
    - name: Print the list
      set_fact:
        uid1: uid1
    - name: show cluster id 
      set_fact:
        uid1: "{{item['id']}}"
      loop: "{{id1}}"
    - name: Get secondary cluster id info
      register: results
      ibm_svcinfo_command:
        command: "svcinfo lspartnership"
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
    - name: show cluster id 
      set_fact:
        id2: "{{ (results['stdout']) }}"
    - name: Print the list
      set_fact:
        uid2: uid2
    - name: show cluster id 
      set_fact:
        uid2: "{{item['id']}}"
      loop: "{{id2}}"
    - name: set provisionpolicy and replicationpoollinkuid on primary site
      ibm_svc_mdiskgrp:
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: mdg0
        state: present
        replicationpoollinkuid: "{{uid}}"
        replication_partner_clusterid: "{{uid2}}"
        provisioningpolicy: provisioning_policy0
    - name: set provisionpolicy and replicationpoollinkuid on secondary site
      ibm_svc_mdiskgrp:
        clustername: "{{secondary_cluster_ip}}"
        username: "{{secondary_cluster_username}}"
        password: "{{secondary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: mdg0
        state: present
        replicationpoollinkuid: "{{uid}}"
        replication_partner_clusterid: "{{uid1}}"
        provisioningpolicy: provisioning_policy0
    - name: Create replication policy 
      ibm_sv_manage_replication_policy:
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: reppoli
        topology: 2-site-async-dr
        location1system: "{{uid1}}"
        location1iogrp: 0
        location2system: "{{uid2}}"
        location2iogrp: 0
        rpoalert: 300
        state: present
    - name: Create volume group
      ibm_svc_manage_volumegroup:
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: "{{volume_group_name}}"
        replicationpolicy: reppoli
        state: present
    - name: Create a List of variable and print it
      set_fact:
        list: []
    - name: create list
      set_fact:
        list: "{{ query('sequence', user_range) }}"
      vars:
        start: 1
        end: "{{ number_of_volumes | default(10) }}"
        user_range: "start={{ start }} end={{ end }} format=%d"
    - name: set default prefix
      set_fact:
        vol_: vol_
    - name: Create a Prefix list variable and print it
      set_fact:
        prefix_list: []
    - name: create prefix list
      set_fact:
        prefix_list: "{{ [volume_prefix | default(vol_)]  | product(list) | map('join') }}"
    - name: Create master volume
      ibm_svc_manage_volume:
        clustername: "{{ primary_cluster_ip }}"
        username: "{{ primary_cluster_username }}"
        password: "{{ primary_cluster_password }}"
        log_path: "{{ log_path | default('/tmp/playbook1.debug') }}"
        name: vo1
        state: present
        pool: "mdg0"
        size: "2"
        unit: gb
    - name: Create volume
      ibm_svc_manage_volume:
        clustername: "{{ primary_cluster_ip }}"
        username: "{{ primary_cluster_username }}"
        password: "{{ primary_cluster_password }}"
        log_path: "{{ log_path | default('/tmp/playbook1.debug') }}"
        name: vo1
        state: present
        volumegroup: "{{volume_group_name}}"
    - name: Create volumes
      ibm_svc_manage_volume:
        clustername: "{{primary_cluster_ip}}"
        username: "{{primary_cluster_username}}"
        password: "{{primary_cluster_password}}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        name: "{{item}}"
        state: "present"
        pool: "mdg0"
        size: "{{volume_size}}"
        unit: "gb"
        volumegroup: "{{volume_group_name}}"
      with_items: "{{prefix_list}}"
    - name: Delete volume
      ibm_svc_manage_volume:
        clustername: "{{ primary_cluster_ip }}"
        username: "{{ primary_cluster_username }}"
        password: "{{ primary_cluster_password }}"
        log_path: "{{ log_path | default('/tmp/playbook1.debug') }}"
        name: vo1
        state: absent
    - name: masterVdisks-host mapping 
      register: results 
      ibm_svc_vol_map:
        clustername: "{{ primary_cluster_ip }}"
        username: "{{ primary_cluster_username }}"
        password: "{{ primary_cluster_password }}"
        log_path: "{{ log_path | default('/tmp/ansiblePB.debug') }}"
        state: present
        volname: "{{item}}"
        host: "{{host_name}}"
      with_items: "{{prefix_list}}"
